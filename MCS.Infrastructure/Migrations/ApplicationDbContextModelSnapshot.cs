// <auto-generated />
using MCS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace MCS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MCS.Infrastructure.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ApplicationRoleId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Configuration");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("JobTitle");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TM_DeviceInfo", b =>
                {
                    b.Property<long>("deviceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("deviceNo");

                    b.Property<long>("deviceSerialNo");

                    b.Property<int?>("deviceState");

                    b.Property<int>("deviceType");

                    b.Property<string>("deviceTypeAbbr");

                    b.Property<string>("stationAbbr");

                    b.Property<int>("stationId");

                    b.HasKey("deviceId");

                    b.ToTable("TM_DeviceInfo");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TM_Event_History_Dtls", b =>
                {
                    b.Property<Guid>("historyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("deviceType");

                    b.Property<string>("equipmentNo");

                    b.Property<string>("eventColor");

                    b.Property<DateTime>("eventDateTime");

                    b.Property<string>("eventDesc");

                    b.Property<int>("eventId");

                    b.Property<string>("eventState");

                    b.Property<string>("severity");

                    b.Property<string>("stationAbbr");

                    b.Property<int>("stationId");

                    b.HasKey("historyId");

                    b.ToTable("TM_Event_History_Dtls");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TP_Color_Severity", b =>
                {
                    b.Property<int>("colorSeverityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("color");

                    b.Property<string>("name");

                    b.HasKey("colorSeverityId");

                    b.ToTable("TP_Color_Severity");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TP_Device", b =>
                {
                    b.Property<long>("deviceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("TP_DeviceTypedeviceTypeId");

                    b.Property<DateTime>("createDate");

                    b.Property<string>("deviceNo");

                    b.Property<long>("deviceSerialNo");

                    b.Property<int?>("deviceState");

                    b.Property<int>("deviceType");

                    b.Property<bool>("isInUse");

                    b.Property<int>("stationId");

                    b.HasKey("deviceId");

                    b.HasIndex("TP_DeviceTypedeviceTypeId");

                    b.HasIndex("stationId");

                    b.ToTable("TP_Device");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TP_DeviceStatus", b =>
                {
                    b.Property<int>("statusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("statusDescription");

                    b.HasKey("statusId");

                    b.ToTable("TP_DeviceStatus");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TP_DeviceType", b =>
                {
                    b.Property<int>("deviceTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("TP_EventseventId");

                    b.Property<string>("deviceTypeAbbr");

                    b.Property<string>("deviceTypeName");

                    b.HasKey("deviceTypeId");

                    b.HasIndex("TP_EventseventId");

                    b.ToTable("TP_DeviceType");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TP_DeviceTypeXStatus", b =>
                {
                    b.Property<int>("deviceType")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("TP_DeviceTypedeviceTypeId");

                    b.Property<int>("statusId");

                    b.HasKey("deviceType");

                    b.HasIndex("TP_DeviceTypedeviceTypeId");

                    b.HasIndex("statusId");

                    b.ToTable("TP_DeviceTypeXStatus");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TP_Event_State", b =>
                {
                    b.Property<int>("severityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("color");

                    b.Property<string>("name");

                    b.HasKey("severityId");

                    b.ToTable("TP_Event_State");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TP_Events", b =>
                {
                    b.Property<int>("eventId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("colorSeverity");

                    b.Property<DateTime>("createDate");

                    b.Property<string>("eventDescription");

                    b.Property<int>("eventSeverity");

                    b.Property<int>("eventType");

                    b.Property<bool>("isInUse");

                    b.HasKey("eventId");

                    b.ToTable("TP_Events");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TP_Station", b =>
                {
                    b.Property<int>("stationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("stationAbbr");

                    b.Property<string>("stationName");

                    b.HasKey("stationId");

                    b.ToTable("TP_Station");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TX_Event_History", b =>
                {
                    b.Property<Guid>("historyId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("deviceId");

                    b.Property<DateTime>("eventDateTime");

                    b.Property<int>("eventId");

                    b.Property<bool>("eventState");

                    b.Property<int>("stationId");

                    b.Property<DateTime>("updateTime");

                    b.HasKey("historyId");

                    b.HasIndex("deviceId");

                    b.HasIndex("eventId");

                    b.ToTable("TX_Event_History");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AspNetUserClaims");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("AspNetUserLogins");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserLogin<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId");

                    b.Property<string>("ClientSecret");

                    b.Property<string>("DisplayName");

                    b.Property<string>("LogoutRedirectUri");

                    b.Property<string>("RedirectUri");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.ToTable("OpenIddictApplications");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("Scope");

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("OpenIddictAuthorizations");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("OpenIddictScopes");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("AuthorizationId");

                    b.Property<string>("Subject");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AuthorizationId");

                    b.ToTable("OpenIddictTokens");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.ApplicationUserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>");

                    b.Property<string>("ApplicationRoleId");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserClaim");

                    b.HasDiscriminator().HasValue("ApplicationUserClaim");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.ApplicationUserLogin", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>");


                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserLogin");

                    b.HasDiscriminator().HasValue("ApplicationUserLogin");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");


                    b.ToTable("ApplicationUserRole");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.ApplicationUser", b =>
                {
                    b.HasOne("MCS.Infrastructure.Models.ApplicationRole")
                        .WithMany("Users")
                        .HasForeignKey("ApplicationRoleId");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TP_Device", b =>
                {
                    b.HasOne("MCS.Infrastructure.Models.TP_DeviceType", "TP_DeviceType")
                        .WithMany("TP_Device")
                        .HasForeignKey("TP_DeviceTypedeviceTypeId");

                    b.HasOne("MCS.Infrastructure.Models.TP_Station", "TP_Station")
                        .WithMany("TP_Device")
                        .HasForeignKey("stationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TP_DeviceType", b =>
                {
                    b.HasOne("MCS.Infrastructure.Models.TP_Events")
                        .WithMany("TP_DeviceType")
                        .HasForeignKey("TP_EventseventId");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TP_DeviceTypeXStatus", b =>
                {
                    b.HasOne("MCS.Infrastructure.Models.TP_DeviceType", "TP_DeviceType")
                        .WithMany("TP_DeviceTypeXStatus")
                        .HasForeignKey("TP_DeviceTypedeviceTypeId");

                    b.HasOne("MCS.Infrastructure.Models.TP_DeviceStatus", "TP_DeviceStatus")
                        .WithMany("TP_DeviceTypeXStatus")
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.TX_Event_History", b =>
                {
                    b.HasOne("MCS.Infrastructure.Models.TP_Device", "TP_Device")
                        .WithMany("TX_Event_History")
                        .HasForeignKey("deviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MCS.Infrastructure.Models.TP_Events", "TP_Events")
                        .WithMany("TX_Event_History")
                        .HasForeignKey("eventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MCS.Infrastructure.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MCS.Infrastructure.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MCS.Infrastructure.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictAuthorization", b =>
                {
                    b.HasOne("OpenIddict.Models.OpenIddictApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictToken", b =>
                {
                    b.HasOne("OpenIddict.Models.OpenIddictApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.Models.OpenIddictAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("MCS.Infrastructure.Models.ApplicationRole")
                        .WithMany("Claims")
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("MCS.Infrastructure.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.ApplicationUserLogin", b =>
                {
                    b.HasOne("MCS.Infrastructure.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MCS.Infrastructure.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("MCS.Infrastructure.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
